{"version":3,"sources":["components/comicsList/ComicsList.js","components/pages/ComicsPage.js","services/MarvelService.js","hooks/http.hook.js","components/errorMessage/error.gif","components/errorMessage/ErrorMessage.js","resources/img/Avengers.png","resources/img/Avengers_logo.png","components/appBanner/AppBanner.js"],"names":["ComicsList","useState","comicsList","setComicsList","offset","setOffset","newListLoading","setNewListLoading","endList","setEndList","useMarvelService","loading","error","clearError","getAllComics","useEffect","onRequest","initial","then","onComicsListLoaded","newComicsList","length","elements","map","comics","id","name","thumbnail","price","imgStyle","className","to","style","src","alt","spinner","Spinner","errorMessage","ErrorMessage","disabled","onClick","display","ComicsPage","Helmet","content","AppBanner","setLoading","setError","request","useCallback","url","method","body","headers","fetch","response","ok","Error","status","json","data","message","useHttp","_apiBase","_apiKey","_baseOffset","getAllCharacters","a","res","results","_transformCharacter","getCharacter","findCharacter","_transformComics","getComic","title","path","extension","prices","urls","description","pageCount","language","textObjects","char","descr","slice","homepage","wiki","items","width","margin","img","avengers","avengersLogo"],"mappings":"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","file":"static/js/6.bd591af2.chunk.js","sourcesContent":["import { useState, useEffect } from 'react';\nimport { Link } from 'react-router-dom';\n\nimport useMarvelService from '../../services/MarvelService';\nimport Spinner from '../spinner/Spinner';\nimport ErrorMessage from '../errorMessage/ErrorMessage';\n\nimport './comicsList.scss';\n\nconst ComicsList = () => {\n\n\tconst [comicsList, setComicsList] = useState([]);\n\tconst [offset, setOffset] = useState(100);\n\tconst [newListLoading, setNewListLoading] = useState(false);\n\tconst [endList, setEndList] = useState(false);\n\tconst {loading, error, clearError, getAllComics} = useMarvelService();\n\n\tuseEffect(() => {\n\t\tonRequest(offset, true)\n\t\t// eslint-disable-next-line\n\t}, [])\n\n\tconst onRequest = (offset, initial) => {\n\t\tclearError();\n\t\tinitial ? setNewListLoading(false) : setNewListLoading(true); // если initial true, то это означает, что у нас первичная загрузка\n\t\tgetAllComics(offset)\n\t\t\t.then(onComicsListLoaded)\n\t}\n\n\tconst onComicsListLoaded = (newComicsList) => {\n\t\tif (newComicsList.length < 8) {\n\t\t\tsetEndList(true);\n\t\t}\n\n\t\tsetComicsList([...comicsList, ...newComicsList]);\n\t\tsetNewListLoading(false);\n\t\tsetOffset(offset => offset + 8);\n\t}\n\t\n\tconst elements = comicsList.map((comics) => {\n\t\tconst {id, name, thumbnail} = comics;\n\t\tlet {price} = comics;\n\t\tconst imgStyle = thumbnail === 'http://i.annihil.us/u/prod/marvel/i/mg/b/40/image_not_available.jpg' ? {'objectFit': 'contain'} : null;\n\t\tprice = price === 0 ? 'Not available' : `${price}$`;\n\n\t\treturn (\n\t\t\t<li key={id} className=\"comics__item\">\n\t\t\t\t<Link to={`/comics/${id}`}>\n\t\t\t\t\t\t<img style={imgStyle} src={thumbnail} alt=\"ultimate war\" className=\"comics__item-img\"/>\n\t\t\t\t\t\t<div className=\"comics__item-name\">{name}</div>\n\t\t\t\t\t\t<div className=\"comics__item-price\">{price}</div>\n\t\t\t\t</Link>\n\t\t\t</li>\n\t\t)\n\t})\n\n\tconst spinner = loading && !newListLoading ? <Spinner/> : null;\n\tconst errorMessage = error ? <ErrorMessage/> : null;\n\n\treturn (\n\t\t\t<div className=\"comics__list\">\n\t\t\t\t{spinner}\n\t\t\t\t{errorMessage}\n\t\t\t\t\t<ul className=\"comics__grid\">\n\t\t\t\t\t\t\t{elements}\n\t\t\t\t\t</ul>\n\t\t\t\t\t<button \n\t\t\t\t\t\tdisabled={newListLoading ? true : false}\n\t\t\t\t\t\tclassName=\"button button__main button__long\"\n\t\t\t\t\t\tonClick={() => onRequest(offset)}\n\t\t\t\t\t\tstyle={{display: endList ? 'none' : 'block'}}>\n\t\t\t\t\t\t\t<div className=\"inner\">load more</div>\n\t\t\t\t\t</button>\n\t\t\t</div>\n\t)\n}\n\nexport default ComicsList;","import { Helmet } from 'react-helmet';\r\n\r\nimport AppBanner from \"../appBanner/AppBanner\";\r\nimport ComicsList from \"../comicsList/ComicsList\";\r\n\r\nconst ComicsPage = () => {\r\n\treturn (\r\n\t\t<>\r\n\t\t\t<Helmet>\r\n\t\t\t\t<meta\r\n\t\t\t\t\tname=\"description\"\r\n\t\t\t\t\tcontent=\"Page with list of comics\"\r\n\t\t\t\t\t/>\r\n\t\t\t\t<title>Comics page</title>\r\n\t\t\t</Helmet>\r\n\t\t\t<AppBanner/>\r\n\t\t\t<ComicsList/>\r\n\t\t</>\r\n\t)\r\n}\r\n\r\nexport default ComicsPage;","import { useHttp } from '../hooks/http.hook';\r\n\r\nconst useMarvelService = () => {\r\n\tconst {loading, request, error, clearError, setError} = useHttp(); // вытаскиваем сущности хука в отдельные переменные\r\n\r\n\tconst _apiBase = 'https://gateway.marvel.com:443/v1/public/';\r\n\tconst _apiKey = 'apikey=21aa5af94424603715dc10109257132d'; \r\n\tconst _baseOffset = 100;\r\n\tconst _issueNumber = 1;\r\n\tconst _comicsLimit = 8;\r\n\r\n\tconst getAllCharacters = async (offset = _baseOffset) => {\r\n\t\tconst res = await request(`${_apiBase}characters?limit=9&offset=${offset}&${_apiKey}`);\r\n\t\treturn res.data.results.map(_transformCharacter); // можно не писать item => this._transformCharacter(item), приходящий аргумент итак попадет в коллбэк\r\n\t}\r\n\t\r\n\tconst getCharacter = async (id) => {\r\n\t\tconst res = await request(`${_apiBase}characters/${id}?limit=9&offset=210&${_apiKey}`);\r\n\t\treturn _transformCharacter(res.data.results[0]);\r\n\t}\r\n\r\n\tconst findCharacter = async (name) => {\r\n\r\n\t\tlet res;\r\n\t\tlet data;\r\n\t\ttry {\r\n\t\t\tres = await request(`${_apiBase}characters?name=${name}&${_apiKey}`);\r\n\t\t\tif (res.data.results.length === 0) throw new Error(`There is no \"${name}\" in database`)\r\n\t\t\tdata = _transformCharacter(res.data.results[0]) \r\n\t\t} catch(e) {\r\n\t\t\tsetError(e.message)\r\n\t\t}\r\n\r\n\t\treturn data;\r\n\t}\r\n\r\n\tconst getAllComics = async(offset = _baseOffset) => {\r\n\t\tconst res = await request(`${_apiBase}comics?issueNumber=${_issueNumber}&orderBy=focDate&limit=${_comicsLimit}&offset=${offset}&${_apiKey}`);\r\n\t\treturn res.data.results.map(_transformComics);\r\n\t}\r\n\r\n\tconst getComic = async(id) => {\r\n\t\tconst res = await request(`${_apiBase}comics/${id}?${_apiKey}`);\r\n\t\treturn _transformComics(res.data.results[0]);\r\n\t}\r\n\r\n\tconst _transformComics = (comics) => {\r\n\t\treturn {\r\n\t\t\tid: comics.id,\r\n\t\t\tname: comics.title,\r\n\t\t\tthumbnail: comics.thumbnail.path + '.' + comics.thumbnail.extension,\r\n\t\t\tprice: comics.prices[0].price,\r\n\t\t\turl: comics.urls[0].url,\r\n\t\t\tdescription: comics.description,\r\n\t\t\tpageCount: comics.pageCount,\r\n\t\t\tlanguage: comics.textObjects[0] ? comics.textObjects[0].language : null,\r\n\t\t}\r\n\t}\r\n\r\n\tconst _transformCharacter = (char) => {\r\n\t\tlet descr = char.description;\r\n\t\tif (!descr) {\r\n\t\t\tdescr = \"Ooops..there's no info about this character\"\r\n\t\t} else if (descr.length > 210) {\r\n\t\t\tdescr = `${descr.slice(0, 207)}...`;\r\n\t\t}\r\n\t\t\r\n\t\treturn {\r\n\t\t\tname: char.name,\r\n\t\t\tdescription: descr,\r\n\t\t\tthumbnail: char.thumbnail.path + '.' + char.thumbnail.extension,\r\n\t\t\thomepage: char.urls[0].url,\r\n\t\t\twiki: char.urls[1].url,\r\n\t\t\tid: char.id,\r\n\t\t\tcomics: char.comics.items,\r\n\t\t}\t\t\r\n\t}\r\n\r\n\treturn {loading, error, getAllCharacters, getCharacter, clearError, getAllComics, getComic, findCharacter, setError} // возвращаем сущности (состояния загрузки и эррора, пройдя через сервис, передадутся после вызова сервиса в компонент)\r\n}\r\n\r\nexport default useMarvelService;","import {useState, useCallback} from 'react';\r\n\r\nexport const useHttp = () => {\r\n\tconst [loading, setLoading] = useState(false);\r\n\tconst [error, setError] = useState(false);\r\n\r\n\tconst request = useCallback(async (url, method = 'GET', body = null, headers = {'Content-type': 'application/json'}) => {\r\n\t\t\r\n\t\tsetLoading(true); // ставим загрузку в активный стэйт\r\n\r\n\t\ttry {\r\n\t\t\tconst response = await fetch(url, {method, body, headers}); // передаем в фетч аргументы из коллбэка для настройки запроса\r\n\r\n\t\t\tif (!response.ok) {\r\n\t\t\t\tthrow new Error(`Could not fetch ${url}, status: ${response.status}`);\r\n\t\t\t}\r\n\r\n\t\t\tconst data = await response.json();\r\n\r\n\t\t\tsetLoading(false); // завершаем загрузку\r\n\t\t\treturn data;\r\n\r\n\t\t} catch(e) {\r\n\t\t\tsetLoading(false); // даже если ошибка, то завершаем загрузку\r\n\t\t\tsetError(e.message); // передаем в стэйт ошибки сообщение об ошибке\r\n\t\t\tthrow e; // пробрасываем ошибку дальше\r\n\t\t}\r\n\t}, []);\r\n\r\n\t// нужна функция, для того, чтобы затереть стейт с ошибкой\r\n\tconst clearError = useCallback(() => setError(null), []);\r\n\r\n\treturn {loading, request, error, clearError, setError}; // возвращаем из хука сущности\r\n}","export default __webpack_public_path__ + \"static/media/error.2e68414c.gif\";","import img from './error.gif';\r\n\r\nconst ErrorMessage = () => {\r\n\treturn(\r\n\t\t<img style={{width: 200, display: 'block', margin: '20px auto 0 auto'}} src={img} alt=\"error\" />\r\n\t)\r\n}\r\n\r\nexport default ErrorMessage;","export default __webpack_public_path__ + \"static/media/Avengers.4065c8f9.png\";","export default __webpack_public_path__ + \"static/media/Avengers_logo.9eaf2193.png\";","import './appBanner.scss';\nimport avengers from '../../resources/img/Avengers.png';\nimport avengersLogo from '../../resources/img/Avengers_logo.png';\n\nconst AppBanner = () => {\n    return (\n        <div className=\"app__banner\">\n            <img src={avengers} alt=\"Avengers\"/>\n            <div className=\"app__banner-text\">\n                New comics every week!<br/>\n                Stay tuned!\n            </div>\n            <img src={avengersLogo} alt=\"Avengers logo\"/>\n        </div>\n    )\n}\n\nexport default AppBanner;"],"sourceRoot":""}